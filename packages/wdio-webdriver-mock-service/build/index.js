"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebDriverMock = void 0;
const nock_1 = __importDefault(require("nock"));
const uuid_1 = require("uuid");
const WebDriverMock_1 = __importDefault(require("./WebDriverMock"));
exports.WebDriverMock = WebDriverMock_1.default;
const constants_1 = require("./constants");
const newSession_1 = require("./mocks/newSession");
const ELEMENT_ID = '401c0039-3306-6a46-a98d-f5939870a249';
const ELEMENT_REFETCHED = '80d860d0-b829-f540-812e-7078eb983795';
const ELEMENT_ALT = '8bf4d107-a363-40d1-b823-d94bdbc58afb';
class WebdriverMockService {
    constructor() {
        this._mock = new WebDriverMock_1.default();
        this.init();
    }
    init() {
        this._mock.command.status().times(Infinity).reply(200, { value: {} });
        this._mock.command.newSession().times(Infinity).reply(200, () => {
            newSession_1.newSession.value.sessionId = uuid_1.v4();
            return newSession_1.newSession;
        });
        this._mock.command.deleteSession().times(2).reply(200, newSession_1.deleteSession);
        this._mock.command.getTitle().times(Infinity).reply(200, { value: 'Mock Page Title' });
        this._mock.command.getUrl().times(Infinity).reply(200, { value: 'https://mymockpage.com' });
        this._mock.command.getElementRect(ELEMENT_ID).times(2).reply(200, { value: { width: 1, height: 2, x: 3, y: 4 } });
        this._mock.command.getElementRect(ELEMENT_ALT).times(2).reply(200, { value: { width: 10, height: 20, x: 30, y: 40 } });
        this._mock.command.getLogTypes().reply(200, { value: [] });
    }
    before(caps, specs, browser) {
        this._browser = browser;
        this._browser.addCommand('waitForElementScenario', this.waitForElementScenario.bind(this));
        this._browser.addCommand('isNeverDisplayedScenario', this.isNeverDisplayedScenario.bind(this));
        this._browser.addCommand('isEventuallyDisplayedScenario', this.isEventuallyDisplayedScenario.bind(this));
        this._browser.addCommand('staleElementRefetchScenario', this.staleElementRefetchScenario.bind(this));
        this._browser.addCommand('customCommandScenario', this.customCommandScenario.bind(this));
        this._browser.addCommand('waitForDisplayedScenario', this.waitForDisplayedScenario.bind(this));
        this._browser.addCommand('cucumberScenario', this.cucumberScenario.bind(this));
        this._browser.addCommand('clickScenario', this.clickScenario.bind(this));
        this._browser.addCommand('isExistingScenario', this.isExistingScenario.bind(this));
    }
    clickScenario() {
        this.nockReset();
        const elemResponse = { 'element-6066-11e4-a52e-4f735466cecf': ELEMENT_ID };
        this._mock.command.findElement().times(2).reply(200, { value: elemResponse });
        this._mock.command.elementClick(ELEMENT_ID).once().reply(200, { value: null });
    }
    isExistingScenario() {
        this.nockReset();
        const elemResponse = { 'element-6066-11e4-a52e-4f735466cecf': ELEMENT_ID };
        this._mock.command.findElement().times(1).reply(200, { value: elemResponse });
        this._mock.command.findElementFromElement(ELEMENT_ID).times(2).reply(200, { value: elemResponse });
        this._mock.command.findElementsFromElement(ELEMENT_ID).times(2).reply(200, { value: [elemResponse] });
    }
    waitForElementScenario() {
        this.nockReset();
        const elemResponse = { 'element-6066-11e4-a52e-4f735466cecf': ELEMENT_ID };
        this._mock.command.findElement().once().reply(404, constants_1.NO_SUCH_ELEMENT);
        this._mock.command.findElement().times(2).reply(200, { value: elemResponse });
        this._mock.command.findElements().times(5).reply(200, { value: [] });
        this._mock.command.findElements().reply(200, { value: [elemResponse] });
        this._mock.command.elementClick(ELEMENT_ID).once().reply(200, { value: null });
    }
    isNeverDisplayedScenario() {
        this.nockReset();
        const elemResponse = { 'element-6066-11e4-a52e-4f735466cecf': ELEMENT_ID };
        this._mock.command.findElement().times(2).reply(404, constants_1.NO_SUCH_ELEMENT);
        this._mock.command.findElement().times(2).reply(200, { value: elemResponse });
        this._mock.command.isElementDisplayed(ELEMENT_ID).once().reply(200, { value: true });
    }
    isEventuallyDisplayedScenario() {
        this.nockReset();
        const elemResponse = { 'element-6066-11e4-a52e-4f735466cecf': ELEMENT_ID };
        this._mock.command.findElement().times(1).reply(404, constants_1.NO_SUCH_ELEMENT);
        this._mock.command.findElement().times(2).reply(200, { value: elemResponse });
        this._mock.command.isElementDisplayed(ELEMENT_ID).once().reply(200, { value: true });
    }
    staleElementRefetchScenario() {
        this.nockReset();
        const elemResponse = { 'element-6066-11e4-a52e-4f735466cecf': ELEMENT_ID };
        const elem2Response = { 'element-6066-11e4-a52e-4f735466cecf': ELEMENT_REFETCHED };
        this._mock.command.findElement().once().reply(200, { value: elemResponse });
        this._mock.command.findElement().once().reply(404, constants_1.NO_SUCH_ELEMENT);
        this._mock.command.findElement().times(4).reply(200, { value: elem2Response });
        this._mock.command.elementClick(ELEMENT_ID).once().reply(200, { value: null });
        this._mock.command.elementClick(ELEMENT_ID).times(4).reply(500, {
            value: {
                error: 'stale element reference',
                message: 'element is not attached to the page document'
            }
        });
        this._mock.command.elementClick(ELEMENT_REFETCHED).times(4).reply(200, { value: null });
        this._mock.command.findElements().times(2).reply(200, { value: [] });
        this._mock.command.findElements().times(4).reply(200, { value: [elem2Response] });
    }
    customCommandScenario(times = 1) {
        this.nockReset();
        const elemResponse = { 'element-6066-11e4-a52e-4f735466cecf': ELEMENT_ID };
        const elemAltResponse = { 'element-6066-11e4-a52e-4f735466cecf': ELEMENT_ALT };
        this._mock.command.findElement().times(times).reply(200, { value: elemResponse });
        this._mock.command.findElement().times(times).reply(200, { value: elemAltResponse });
        this._mock.command.executeScript().times(times).reply(200, { value: '2' });
        this._mock.command.deleteAllCookies().times(times).reply(200, { value: 'deleteAllCookies' });
    }
    waitForDisplayedScenario() {
        this.nockReset();
        const elemResponse = { 'element-6066-11e4-a52e-4f735466cecf': ELEMENT_ID };
        this._mock.command.findElement().once().reply(200, { value: elemResponse });
        this._mock.command.isElementDisplayed(ELEMENT_ID).times(4).reply(200, { value: false });
        this._mock.command.isElementDisplayed(ELEMENT_ID).once().reply(200, { value: true });
    }
    cucumberScenario() {
        this.nockReset();
        const elemResponse = { 'element-6066-11e4-a52e-4f735466cecf': ELEMENT_ID };
        this._mock.command.navigateTo().reply(200, { value: null });
        this._mock.command.findElement().times(4).reply(200, { value: elemResponse });
        this._mock.command.elementClick(ELEMENT_ID).reply(200, { value: null });
    }
    nockReset() {
        nock_1.default.cleanAll();
        this.init();
    }
}
exports.default = WebdriverMockService;
//# sourceMappingURL=data:application/json;base64,