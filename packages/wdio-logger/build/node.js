"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const loglevel_1 = __importDefault(require("loglevel"));
const util_1 = __importDefault(require("util"));
const chalk_1 = __importDefault(require("chalk"));
const loglevel_plugin_prefix_1 = __importDefault(require("loglevel-plugin-prefix"));
const strip_ansi_1 = __importDefault(require("strip-ansi"));
loglevel_plugin_prefix_1.default.reg(loglevel_1.default);
const DEFAULT_LEVEL = 'trace';
const COLORS = {
    error: 'red',
    warn: 'yellow',
    info: 'cyanBright',
    debug: 'green',
    trace: 'cyan'
};
const matches = {
    COMMAND: 'COMMAND',
    DATA: 'DATA',
    RESULT: 'RESULT'
};
const SERIALIZERS = [{
        matches: (err) => err instanceof Error,
        serialize: (err) => err.stack
    }, {
        matches: (log) => log === matches.COMMAND,
        serialize: (log) => chalk_1.default.magenta(log)
    }, {
        matches: (log) => log === matches.DATA,
        serialize: (log) => chalk_1.default.yellow(log)
    }, {
        matches: (log) => log === matches.RESULT,
        serialize: (log) => chalk_1.default.cyan(log)
    }];
const loggers = loglevel_1.default.getLoggers();
let logLevelsConfig = {};
const logCache = new Set();
let logFile;
const originalFactory = loglevel_1.default.methodFactory;
const wdioLoggerMethodFactory = function (methodName, logLevel, loggerName) {
    const rawMethod = originalFactory(methodName, logLevel, loggerName);
    return (...args) => {
        if (!logFile && process.env.WDIO_LOG_PATH) {
            logFile = fs_1.default.createWriteStream(process.env.WDIO_LOG_PATH);
        }
        const match = Object.values(matches).filter(x => args[0].endsWith(`: ${x}`))[0];
        if (match) {
            const prefixStr = args.shift().slice(0, -match.length - 1);
            args.unshift(prefixStr, match);
        }
        args = args.map((arg) => {
            for (const s of SERIALIZERS) {
                if (s.matches(arg)) {
                    return s.serialize(arg);
                }
            }
            return arg;
        });
        const logText = strip_ansi_1.default(`${util_1.default.format.apply(this, args)}\n`);
        if (logFile && logFile.writable) {
            if (logCache.size) {
                logCache.forEach((log) => {
                    if (logFile) {
                        logFile.write(log);
                    }
                });
                logCache.clear();
            }
            return logFile.write(logText);
        }
        logCache.add(logText);
        rawMethod(...args);
    };
};
function getLogger(name) {
    if (loggers[name]) {
        return loggers[name];
    }
    let logLevel = (process.env.WDIO_LOG_LEVEL || DEFAULT_LEVEL);
    const logLevelName = getLogLevelName(name);
    if (logLevelsConfig[logLevelName]) {
        logLevel = logLevelsConfig[logLevelName];
    }
    loggers[name] = loglevel_1.default.getLogger(name);
    loggers[name].setLevel(logLevel);
    loggers[name].methodFactory = wdioLoggerMethodFactory;
    loglevel_plugin_prefix_1.default.apply(loggers[name], {
        template: '%t %l %n:',
        timestampFormatter: (date) => chalk_1.default.gray(date.toISOString()),
        levelFormatter: (level) => chalk_1.default[COLORS[level]](level.toUpperCase()),
        nameFormatter: (name) => chalk_1.default.whiteBright(name)
    });
    return loggers[name];
}
exports.default = getLogger;
getLogger.waitForBuffer = async () => new Promise(resolve => {
    if (logFile && Array.isArray(logFile.writableBuffer) && logFile.writableBuffer.length !== 0) {
        return setTimeout(async () => {
            await getLogger.waitForBuffer();
            resolve();
        }, 20);
    }
    resolve();
});
getLogger.setLevel = (name, level) => loggers[name].setLevel(level);
getLogger.clearLogger = () => {
    if (logFile) {
        logFile.end();
    }
    logFile = null;
};
getLogger.setLogLevelsConfig = (logLevels = {}, wdioLogLevel = DEFAULT_LEVEL) => {
    if (process.env.WDIO_LOG_LEVEL === undefined) {
        process.env.WDIO_LOG_LEVEL = wdioLogLevel;
    }
    logLevelsConfig = {};
    Object.entries(logLevels).forEach(([logName, logLevel]) => {
        const logLevelName = getLogLevelName(logName);
        logLevelsConfig[logLevelName] = logLevel;
    });
    Object.keys(loggers).forEach(logName => {
        const logLevelName = getLogLevelName(logName);
        const logLevel = typeof logLevelsConfig[logLevelName] !== 'undefined' ? logLevelsConfig[logLevelName] : process.env.WDIO_LOG_LEVEL;
        loggers[logName].setLevel(logLevel);
    });
};
const getLogLevelName = (logName) => logName.split(':').shift();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9ub2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNENBQW1CO0FBQ25CLHdEQUEwQjtBQUMxQixnREFBdUI7QUFDdkIsa0RBQW9DO0FBQ3BDLG9GQUEyQztBQUMzQyw0REFBa0M7QUFFbEMsZ0NBQU0sQ0FBQyxHQUFHLENBQUMsa0JBQUcsQ0FBQyxDQUFBO0FBRWYsTUFBTSxhQUFhLEdBQUcsT0FBTyxDQUFBO0FBQzdCLE1BQU0sTUFBTSxHQUFpQztJQUN6QyxLQUFLLEVBQUUsS0FBSztJQUNaLElBQUksRUFBRSxRQUFRO0lBQ2QsSUFBSSxFQUFFLFlBQVk7SUFDbEIsS0FBSyxFQUFFLE9BQU87SUFDZCxLQUFLLEVBQUUsTUFBTTtDQUNoQixDQUFBO0FBRUQsTUFBTSxPQUFPLEdBQUc7SUFDWixPQUFPLEVBQUUsU0FBUztJQUNsQixJQUFJLEVBQUUsTUFBTTtJQUNaLE1BQU0sRUFBRSxRQUFRO0NBQ25CLENBQUE7QUFFRCxNQUFNLFdBQVcsR0FBRyxDQUFDO1FBSWpCLE9BQU8sRUFBRSxDQUFDLEdBQVEsRUFBRSxFQUFFLENBQUMsR0FBRyxZQUFZLEtBQUs7UUFDM0MsU0FBUyxFQUFFLENBQUMsR0FBUSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSztLQUNyQyxFQUFFO1FBSUMsT0FBTyxFQUFFLENBQUMsR0FBVyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEtBQUssT0FBTyxDQUFDLE9BQU87UUFDakQsU0FBUyxFQUFFLENBQUMsR0FBVyxFQUFFLEVBQUUsQ0FBQyxlQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztLQUNqRCxFQUFFO1FBSUMsT0FBTyxFQUFFLENBQUMsR0FBVyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEtBQUssT0FBTyxDQUFDLElBQUk7UUFDOUMsU0FBUyxFQUFFLENBQUMsR0FBVyxFQUFFLEVBQUUsQ0FBQyxlQUFLLENBQUMsTUFBTSxDQUFD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QUFBO0lBQzVDLENBQUMsQ0FBQyxDQUFBO0lBS0YsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7UUFDbkMsTUFBTSxZQUFZLEdBQUcsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBSzdDLE1BQU0sUUFBUSxHQUFHLE9BQU8sZUFBZSxDQUFDLFlBQVksQ0FBQyxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWtDLENBQUE7UUFFdEosT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUN2QyxDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUMsQ0FBQTtBQUNELE1BQU0sZUFBZSxHQUFHLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBc0IsQ0FBQSJ9